//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Dialogue System Examples/Four Button UI Example/FourButtonInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FourButtonInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FourButtonInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FourButtonInputActions"",
    ""maps"": [
        {
            ""name"": ""DialogueMap"",
            ""id"": ""eb98f227-e424-4a07-af95-c4c226b466d8"",
            ""actions"": [
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""5904ae6d-2e16-4863-9fb2-becee5d937da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""B"",
                    ""type"": ""Button"",
                    ""id"": ""db3b7f85-2d47-49cc-a8ae-f8d32c649da3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""b5a73267-3ea4-4346-817a-fd7315246b69"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Y"",
                    ""type"": ""Button"",
                    ""id"": ""2b4ac792-6844-42dc-b77b-b42519dc2b51"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e013c404-3ce2-4495-b938-0e63fe35c2eb"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e65c8b8-3978-4f54-a123-c1f456400136"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""820f55e4-ca42-4a61-af6e-77d49815991c"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49b3ebce-bf13-498a-a1d4-546b6254de85"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DialogueMap
        m_DialogueMap = asset.FindActionMap("DialogueMap", throwIfNotFound: true);
        m_DialogueMap_A = m_DialogueMap.FindAction("A", throwIfNotFound: true);
        m_DialogueMap_B = m_DialogueMap.FindAction("B", throwIfNotFound: true);
        m_DialogueMap_X = m_DialogueMap.FindAction("X", throwIfNotFound: true);
        m_DialogueMap_Y = m_DialogueMap.FindAction("Y", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DialogueMap
    private readonly InputActionMap m_DialogueMap;
    private List<IDialogueMapActions> m_DialogueMapActionsCallbackInterfaces = new List<IDialogueMapActions>();
    private readonly InputAction m_DialogueMap_A;
    private readonly InputAction m_DialogueMap_B;
    private readonly InputAction m_DialogueMap_X;
    private readonly InputAction m_DialogueMap_Y;
    public struct DialogueMapActions
    {
        private @FourButtonInputActions m_Wrapper;
        public DialogueMapActions(@FourButtonInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @A => m_Wrapper.m_DialogueMap_A;
        public InputAction @B => m_Wrapper.m_DialogueMap_B;
        public InputAction @X => m_Wrapper.m_DialogueMap_X;
        public InputAction @Y => m_Wrapper.m_DialogueMap_Y;
        public InputActionMap Get() { return m_Wrapper.m_DialogueMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogueMapActions set) { return set.Get(); }
        public void AddCallbacks(IDialogueMapActions instance)
        {
            if (instance == null || m_Wrapper.m_DialogueMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DialogueMapActionsCallbackInterfaces.Add(instance);
            @A.started += instance.OnA;
            @A.performed += instance.OnA;
            @A.canceled += instance.OnA;
            @B.started += instance.OnB;
            @B.performed += instance.OnB;
            @B.canceled += instance.OnB;
            @X.started += instance.OnX;
            @X.performed += instance.OnX;
            @X.canceled += instance.OnX;
            @Y.started += instance.OnY;
            @Y.performed += instance.OnY;
            @Y.canceled += instance.OnY;
        }

        private void UnregisterCallbacks(IDialogueMapActions instance)
        {
            @A.started -= instance.OnA;
            @A.performed -= instance.OnA;
            @A.canceled -= instance.OnA;
            @B.started -= instance.OnB;
            @B.performed -= instance.OnB;
            @B.canceled -= instance.OnB;
            @X.started -= instance.OnX;
            @X.performed -= instance.OnX;
            @X.canceled -= instance.OnX;
            @Y.started -= instance.OnY;
            @Y.performed -= instance.OnY;
            @Y.canceled -= instance.OnY;
        }

        public void RemoveCallbacks(IDialogueMapActions instance)
        {
            if (m_Wrapper.m_DialogueMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDialogueMapActions instance)
        {
            foreach (var item in m_Wrapper.m_DialogueMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DialogueMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DialogueMapActions @DialogueMap => new DialogueMapActions(this);
    public interface IDialogueMapActions
    {
        void OnA(InputAction.CallbackContext context);
        void OnB(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
        void OnY(InputAction.CallbackContext context);
    }
}
